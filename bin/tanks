#!/usr/bin/env python3

# Copyright (C) 2014 Marvin Poul <ponder@creshal.de>
import argparse
import sys
import logging
import math
import pygame
import ecs
from pygame.locals import *

import copanzers
from copanzers.systems import *
from copanzers.util import make_color_surface, RefFloat
from copanzers import make

def load_routine (script):

    with open (script) as f:
        l = {}
        routine = exec (f.read (), l)
        return l ["main"]

def init_demo (entity_manager, w, h, time, _):
    # we don't need the args instance in here yet and just add that paramater
    # to make the function signatures equal

    make.example_barrier (entity_manager, 100, (w / 4, 20), (w / 2, 100))
    for i in range (3):
        make.example_barrier (entity_manager, 20, (20, 20), (50 + i * (w - 100)/2, 50))

    make.scripted_turret (entity_manager, 
            load_routine ("examples/demo_turret.py"), 
            time, (w * .9, h * .9))
    make.scripted_turret (entity_manager, 
            load_routine ("examples/demo_turret.py"), 
            time, (w * .1, h * .9))

    make.scripted_tank (entity_manager, 
            load_routine ("examples/demo_tank.py"),
            time, (w * .5, h * .5))

def init_match (entity_manager, w, h, time, args):

    n = len (args.scripts)
    offset = 100

    for i in range (n):
        make.scripted_tank (
                entity_manager,
                load_routine (args.scripts [i]),
                time,
                # ahaha inline ifs!
                (offset + i * (w - 2 * offset) / (n - 1 if n > 1 else 1), h * .5)
        )

def main (fps, w, h):

    parser = argparse.ArgumentParser (prog = "tanks")
    parser.add_argument ("--verbose", "-v", action = "count", default = 0,
            help = "Can be given multiple times to increase verbosity.")
    parser.add_argument ("--quiet",   "-q", action = "count", default = 0,
            help = "Can be given multiple times to increase quietness.")
    parser.add_argument ("--script",  "-l", action = "store_true",
            help = "Only print logs from the script routines.")
    parser.add_argument ("--speed",   "-s", default = 1, type = int,
            help = "Factor how fast the game should play (default: 1).")

    subs = parser.add_subparsers ()
    demo_parser = subs.add_parser ("demo")
    demo_parser.set_defaults (init = init_demo)

    match_parser = subs.add_parser ("match")
    match_parser.add_argument ("scripts", nargs = "+",
            help = "Paths to script files that should battle each other.")
    match_parser.set_defaults (init = init_match)

    args = parser.parse_args ()

    root_logger = logging.getLogger ()
    root_handler = logging.StreamHandler (sys.stderr)
    root_handler.setFormatter (
        logging.Formatter ("%(levelname)s %(name)s\n\t%(message)s\n"))
    root_logger.addHandler (root_handler)
    root_logger.setLevel (
        logging.WARNING + 10 * (args.quiet - args.verbose))

    if args.script:
        root_filter = logging.Filter ("copanzers.scripts")
        root_handler.addFilter (root_filter)

    pygame.init ()
    surface = pygame.display.set_mode ( (w, h) )
    clock   = pygame.time.Clock ()

    entity_manager = ecs.managers.EntityManager ()
    system_manager = ecs.managers.SystemManager (entity_manager)

    system_manager.add_system (MovementSystem (w, h))
    system_manager.add_system (HealthSystem ())
    system_manager.add_system (WeaponSystem ())
    system_manager.add_system (MountSystem ())
    system_manager.add_system (CollisionSystem ())
    system_manager.add_system (VisionSystem ())
    system_manager.add_system (ScriptSystem ())
    system_manager.add_system (RenderSystem (surface))
    system_manager.add_system (HealthRenderSystem (surface))
    system_manager.add_system (KillSystem ())

    time = RefFloat (0)
    args.init (entity_manager, w, h, time, args)

    dt = args.speed / fps

    while 1:

        for e in pygame.event.get ():
            if e.type == QUIT: return

        system_manager.update (dt)
        pygame.display.update ()
        clock.tick (fps)
        time += dt

if __name__ == "__main__":
    main (30, 640, 340)
